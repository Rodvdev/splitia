// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  email         String         @unique
  password      String         // Added for Next-Auth credentials
  externalId    String?        @unique // For Supabase authentication
  image         String?
  currency      String         @default("PEN") // Default currency
  language      String         @default("es") // Default language
  // Relations
  groups        GroupUser[]
  expenses      Expense[]
  expenseShares ExpenseShare[]
  budgets       Budget[]
  sentMessages  Message[]      @relation("SentMessages")
  conversations ConversationParticipant[]
  messageSeen   MessageSeen[]
  categories    CustomCategory[]
  preferences   UserPreference?
  createdGroups Group[]        @relation("CreatedGroups")
  // Group invitations the user has created
  createdInvitations GroupInvitation[] @relation("CreatedInvitations")
  // Group invitations the user has been invited through
  receivedInvitations GroupInvitation[] @relation("ReceivedInvitations")
  // Settlements initiated by this user
  initiatedSettlements Settlement[] @relation("InitiatedSettlements")
  // Settlements where this user is the counterparty
  receivedSettlements Settlement[] @relation("ReceivedSettlements")
}

// Group model
model Group {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  name          String
  description   String?
  image         String?
  // Relations
  members       GroupUser[]
  expenses      Expense[]
  conversation  Conversation?  @relation("GroupConversation", fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String?       @unique
  invitations   GroupInvitation[]
  createdBy     User           @relation("CreatedGroups", fields: [createdById], references: [id])
  createdById   String
  settlements   Settlement[]
}

// GroupUser model (for many-to-many relationship between User and Group)
model GroupUser {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  role      GroupRole @default(MEMBER)
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  group     Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   String

  @@unique([userId, groupId])
}

// Expense model
model Expense {
  id          String         @id @default(cuid())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  amount      Float
  description String
  date        DateTime
  categoryId  String?
  currency    String         @default("USD")
  location    String?
  notes       String?
  isSettlement Boolean       @default(false)
  // Relations
  paidBy      User           @relation(fields: [paidById], references: [id])
  paidById    String
  group       Group?         @relation(fields: [groupId], references: [id])
  groupId     String?
  shares      ExpenseShare[]
  category    CustomCategory? @relation(fields: [categoryId], references: [id])
  settlement  Settlement?    @relation(fields: [settlementId], references: [id])
  settlementId String?       @unique
}

// ExpenseShare model
model ExpenseShare {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  amount    Float
  type      ShareType  @default(EQUAL)
  // Relations
  expense   Expense    @relation(fields: [expenseId], references: [id], onDelete: Cascade)
  expenseId String
  user      User       @relation(fields: [userId], references: [id])
  userId    String

  @@unique([expenseId, userId])
}

// Budget model
model Budget {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  amount    Float
  month     Int
  year      Int
  currency  String   @default("USD")
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  category  CustomCategory? @relation(fields: [categoryId], references: [id])
  categoryId String?

  @@unique([userId, month, year, categoryId])
}

// CustomCategory model
model CustomCategory {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  icon      String?
  color     String?
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  expenses  Expense[]
  budgets   Budget[]

  @@unique([userId, name])
}

// Conversation model
model Conversation {
  id            String                    @id @default(cuid())
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt
  isGroupChat   Boolean                   @default(false)
  name          String?                   // Optional name for non-group chats
  // Relations
  participants  ConversationParticipant[]
  messages      Message[]
  group         Group?                    @relation("GroupConversation")
  groupId       String?                   @unique
}

// ConversationParticipant model
model ConversationParticipant {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String

  @@unique([conversationId, userId])
}

// Message model
model Message {
  id             String        @id @default(cuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  content        String
  isAI           Boolean       @default(false)
  // Relations
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId String
  sender         User          @relation("SentMessages", fields: [senderId], references: [id])
  senderId       String
  seenBy         MessageSeen[]
}

// MessageSeen model
model MessageSeen {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  // Relations
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@unique([messageId, userId])
}

// AIAction model for auditing AI actions
model AIAction {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  action      AIActionType
  description String
  prompt      String       // The user's original prompt
  result      String       // JSON string of the action result
  metadata    String?      // Additional JSON metadata
}

// UserPreference model for internationalization and other preferences
model UserPreference {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  theme       String   @default("light") // UI theme
  dateFormat  String   @default("MM/DD/YYYY") // Date format preference
  timeFormat  String   @default("12h") // 12h or 24h
  notifications Boolean @default(true) // Whether the user wants to receive notifications
  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String   @unique
}

// GroupInvitation model for invitations
model GroupInvitation {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  token       String    @unique // Unique token for the invitation link
  expiresAt   DateTime?
  usedAt      DateTime?
  maxUses     Int?      // Maximum number of uses (null = unlimited)
  useCount    Int       @default(0) // Current use count
  // Relations
  group       Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId     String
  creator     User      @relation("CreatedInvitations", fields: [creatorId], references: [id])
  creatorId   String
  invitedUser User?     @relation("ReceivedInvitations", fields: [invitedUserId], references: [id])
  invitedUserId String?
}

// Settlement model
model Settlement {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  amount          Float
  currency        String           @default("USD")
  description     String?
  date            DateTime
  settlementStatus SettlementStatus @default(PENDING)
  settlementType   SettlementType   @default(PAYMENT)
  // Relations
  initiatedBy     User             @relation("InitiatedSettlements", fields: [initiatedById], references: [id])
  initiatedById   String
  settledWithUser User             @relation("ReceivedSettlements", fields: [settledWithUserId], references: [id])
  settledWithUserId String
  group           Group            @relation(fields: [groupId], references: [id])
  groupId         String
  expense         Expense?
}

// Enums
enum GroupRole {
  ADMIN
  MEMBER
  GUEST
  ASSISTANT
}

enum ShareType {
  EQUAL
  PERCENTAGE
  FIXED
}

enum SettlementStatus {
  PENDING
  PENDING_CONFIRMATION
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum SettlementType {
  PAYMENT
  RECEIPT
}

enum AIActionType {
  EXPENSE_CREATE
  EXPENSE_UPDATE
  GROUP_CREATE
  PAYMENT_RECORD
}
